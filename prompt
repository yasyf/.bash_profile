#!/bin/bash
# Left/right-handed bash prompt | Spencer Tipping
# Licensed under the terms of the MIT source code license

function setup_left_and_right {
  # Your customizations go here. The idea is to export $PS1_LEFT and $PS1_RIGHT
  # as two strings, each formatted like $PS1 normally is. (That is, with \[\]
  # around escape sequences.)

  # Note that you can't use Bash-specific backslash sequences on the right; if
  # you do, this script won't know the proper length and your right prompt will
  # most likely run off the screen.

  local exit_code=$?
  local job_pid=$!
 export PS1_LEFT="\[\e[0;34m\]┌──[\`if [ \$? = 0 ]; then echo -e '\[\e[32;1m\]:)'; else echo -e '\e[01;31m\]:('; fi\`\[\e[0;34m\]]──[\[\e[0;34m\]\[\e[0;35m\]\u\]\e[0;34m\]]\[\e[m\]\[\e[0;34m\]──[\[\e[0;34m\]\[\e[0;35m\]\j\[\e[0;34m\]]\[\e[m\]\[\e[0;34m\]──\[\e[0;34m\][\[\e[0;35m\]\w\[\e[m\]\[\e[0;34m\]]\e[0;34m\]──\[\e[0;34m\][\[\e[0;35m\]\$(ls -1 | wc -l | sed 's: ::g') files\[\e[m\]\[\e[0;34m\]]\n\[\e[0;34m\]└──\e[0;35m\]─ \[\e[m\]\[\e[0;32m\]"
 
 export PS1_RIGHT="$(default_right_prompt "$exit_code" "$job_pid")"

}

function default_right_prompt {
  # I've put the right prompt logic into a separate function since there are
  # several pieces of data that need to be computed.
  local exit_code=$1
  local job_pid=$2


  # Shell stuff. Show the most recent background job PID if it's still running,
  # and show the most recent exit status if it wasn't 0. Also show the number
  # of background jobs.
  local number_of_jobs=$(jobs | wc -l)
  ((number_of_jobs != 0))                     && local job_status_indicator=" \[\033[1;33m\]j$number_of_jobs\[\033[0;0m\]"
  ((job_pid != 0)) && [[ -d /proc/$job_pid ]] && local    job_pid_indicator=" \[\033[1;35m\]&$job_pid\[\033[0;0m\]"
  ((exit_code != 0))                          && local  exit_code_indicator=" \[\033[1;31m\]e$exit_code\[\033[0;0m\]"

  # Look for a couple of dotfiles that might be present, and find out which
  # git branch we're on.
  local git_branch="$(git_status $PWD)"
  [[ -z "$git_branch" ]] || local git_branch_indicator=" \[\033[1;33m\]g(\[\033[1;32m\]$git_branch\[\033[1;33m\])"
  [[ -r .test-log ]]     && local   test_log_indicator=" $(meter 32 31 $(grep '^pass' .test-log | wc -l) $(grep '^fail' .test-log | wc -l))"
  [[ -r .todo ]]         && local       todo_indicator=" \[\033[1;36m\]t$(wc -l < .todo)\[\033[0;0m\]"

 

  local     shell_indicators="${exit_code_indicator}${job_pid_indicator}${job_status_indicator}"
  local directory_indicators="${git_branch_indicator}${test_log_indicator}${todo_indicator}"

  echo -n "${shell_indicators}${directory_indicators}"
}

function git_status {
  # Current git branch.
  if [[ -d "$1/.git" ]]; then
    sed 's/.*\///' "$1/.git/HEAD" | head -c6
  elif [[ ! -z "$1" ]]; then
    git_status "${1%/*}"
  fi
}

# Meter function.
# Draws ten dots in two colors. You specify the two color codes and the widths
# of the pieces relative to each other. For example, you can put this into your
# PS1_LEFT or PS1_RIGHT:
#
# $(meter 32 33 100 200)
#
# This will draw a short line of green dots followed by a long line of gray
# ones. The reason is that 32 is green, 33 is gray, 100 is the first fraction,
# and 200 is the second fraction. So scaling 330 down to 10, we have about 3
# green dots and 7 gray ones.
function meter {
  local color1=$1
  local color2=$2
  local value1=$3
  local value2=$4

  local total=$((value1 + value2))

  if ((total > 0)); then
    local scaled_v1=$((value1 * 10 / total))
    local scaled_v2=$((10 - scaled_v1))     # To prevent rounding error

    if ((scaled_v2 == 0 && value2 > 0)); then
      # Indicate the presence of some value2
      ((++scaled_v2))
      ((--scaled_v1))
    fi

    local v1=$(head -c$scaled_v1 <<< '..........')
    local v2=$(head -c$scaled_v2 <<< '..........')
    echo "\[\033[1;${color1}m\]$v1\[\033[1;${color2}m\]$v2\[\033[0;0m\]"
  fi
}

# This is where we do all of the crazy sed trickery to figure out where to
# place the right prompt. Once we get it figured out it's actually easy to
# render; we just draw the right prompt first, then use \r to go all the way to
# the left, and draw the left prompt.
function set_ps1 {
  setup_left_and_right

  local right_minus_escapes="$(sed 's/\\\[[^]]*\\\]*//g' <<< "$PS1_RIGHT")"
  local right_minus_escape_brackets="$(sed 's/\\[][]//g' <<< "$PS1_RIGHT")"
  local width=${#right_minus_escapes}
  local position=$((COLUMNS - width))

  export PS1="\[\033[${position}G$right_minus_escape_brackets\r\]$PS1_LEFT"


}

export PROMPT_COMMAND=set_ps1
