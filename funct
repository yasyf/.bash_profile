#!/bin/bash
function doubleohfive() {
	cd /Users/yasyf/Dropbox\ \(MIT\)/Fall\ 2014/6.005
	git clone ssh://yasyf@athena.dialup.mit.edu/mit/6.005/git/fa14/psets/ps$1/yasyf.git ps$1
	pf ps$1
}
function whiteboard_convert(){
	convert "$1" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$2"
}
function rsyncb(){
rsync -u -r $1 $2
rsync -u -r $2 $1
}
function gitpatch() { curl "$1.patch" | git apply -; }
function zap() { open -a AppZapper /Applications/"${1}".app; }
function mitfinger() { finger $1@mitdir.mit.edu; }
function ql() { qlmanage -px  $1 > /dev/null 2>&1; }
function mate() { /usr/local/bin/subl $1; }
function urlencode() { echo $(php -r "echo rawurlencode('$1');"); }
function public() {
NAME=$(echo "$1" | sed -e 's/ /_/g' | sed -e "s/'//g" | xargs basename)
ln -s "$1" ~/Dropbox/Public/Files/$NAME

 }
function bp()
{
	local DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	local files="$(ls $DIR | grep -v master | grep -v README | grep -v git | tail -n +3)"

if [[ $1 && -f "$DIR/$1" ]]; then

	mate $DIR/$1
elif [[ $1 == "f" ]]; then
	pf $DIR
else
	mate ~/.bash_profile
fi
}
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}
function dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}
function mail_local()
{
	open "mailto:$1?subject=$2&body=$3"
}
function ocr()
{
#need takocr installed
if [[ $1 ]]; then
	cd /tmp
	convert -density 200 -units PixelsPerInch -type Grayscale +compress "$1" "tmp.tif"
	tesseract tmp.tif tmp > /dev/null 2>&1
	TEXT=`cat tmp.txt`
	rm tmp.txt
	rm tmp.tif
	echo $TEXT | pbcopy
	echo $TEXT
	cd ~
else
	#echo "Usage: ocr input.img"
	cd /tmp
	convert -density 200 -units PixelsPerInch -type Grayscale +compress "/Users/yasyf/Dropbox/Public/Screenshots/`ls -t /Users/yasyf/Dropbox/Public/Screenshots | head -2 | tail -1`" 	"tmp.tif"
	tesseract tmp.tif tmp > /dev/null 2>&1
	TEXT=`cat tmp.txt`
	rm tmp.txt
	rm tmp.tif
	echo $TEXT | pbcopy
	echo $TEXT
	cd ~
fi
}

function extract()      # Handy Extract Program
{
		if [ -f $1 ] ; then
				case $1 in
						*.tar.bz2)   tar xvjf $1     ;;
						*.tar.gz)    tar xvzf $1     ;;
						*.bz2)       bunzip2 $1      ;;
						*.rar)       unrar x $1      ;;
						*.gz)        gunzip $1       ;;
						*.tar)       tar xvf $1      ;;
						*.tbz2)      tar xvjf $1     ;;
						*.tgz)       tar xvzf $1     ;;
						*.zip)       unzip $1        ;;
						*.Z)         uncompress $1   ;;
						*.7z)        7z x $1         ;;
						*)           echo "'$1' cannot be extracted via >extract<" ;;
				esac
		else
				echo "'$1' is not a valid file!"
		fi
}


function bpython() {
		if test -n "$VIRTUAL_ENV"
		then
				PYTHONPATH="$(python -c 'import sys; print ":".join(sys.path)')" \
				command bpython "$@"
		else
				command bpython "$@"
		fi
}

function setup6172() {
	PWD=$(pwd)
	DIR_NAME=$(basename "$PWD")
	CONFIG="/tmp/6172_config/$DIR_NAME"
	HOST='mit'
	EMAIL='yasyf@mit.edu'
	TARGET="Documents/6.172/$DIR_NAME"

	git config user.email "$EMAIL"

	if [ $(ps aux | grep lsyncd | grep $DIR_NAME | wc -l) -eq 0 ]; then
		mkdir -p $(dirname "$CONFIG")
		cat <<- EOF > "$CONFIG"
			sync {
				default.rsync,
				rsync = {
					binary='/usr/local/bin/rsync',
					archive=true,
					compress=true,
					cvs_exclude=true,
				},
				exclude={ '.git', '*.o', '*.gc*' },
				source='$PWD',
				target='$HOST:$TARGET',
				delay=1,
			}
		EOF
		sudo lsyncd $CONFIG
	fi

	ssh $HOST -t "cd $TARGET; bash -l"
}

function monitor_lab() {
	fswatch -l 1 -0 "$1" | xargs -0 -n 1 -I {} run_6034_tests
}

function mount_mit() {
	DIR="$HOME/mnt/mit/$1"
	mkdir -p $DIR
	sshfs "mit:$1" $DIR -o reconnect,ServerAliveInterval=5,ServerAliveCountMax=2
	cd $DIR
}

function frameworkpython {
    if [[ ! -z "$VIRTUAL_ENV" ]]; then
        PYTHONHOME=$VIRTUAL_ENV /usr/local/bin/python "$@"
    else
        /usr/local/bin/python "$@"
    fi
}
